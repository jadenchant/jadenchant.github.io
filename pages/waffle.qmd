---
title: "Waffle"
editor_options: 
  chunk_output_type: console
execute:
  warning: false
---

```{r}
#| include: false

library(waffle)
library(magrittr)
library(janitor)
library(ggdark)
library(tidyverse)

mn_eco_industry_raw <- read_csv("https://jadenchant.github.io/data/mn_eco_industry2017.csv") |>
  clean_names()

# sector = NAICS economic sector 
# estab =	Number of establishments
# napcsdol = Sales, value of shipments, or revenue of NAPCS collection code ($1,000)

# 44 Retail Trade
# 61 Educational Services
# 62 Health Care and Social Assistance
# 71 Arts, Entertainment and Recreation
# 72 Accommodation and Food Services
# 81 Personal and Laundry Services
```

```{r}
mn_eco_industry <- clean_names(mn_eco_industry_raw) |>
  select(naics2017, naics2017_label, sector, estab, napcsdol) |>
  mutate(estab = as.numeric(estab)) |>
  filter(!is.na(estab)) |>
  mutate(napcsdol = as.numeric(napcsdol)) |>
  mutate(sector_label = case_when(
           sector == 44 ~ "Retail Trade",
           sector == 61 ~ "Educational Services",
           sector == 62 ~ "Health Care and Social Assistance",
           sector == 71 ~ "Arts, Entertainment and Recreation",
           sector == 72 ~ "Accommodation and Food Services",
           sector == 81 ~ "Personal and Laundry Services",
           TRUE ~ as.character(sector)
         ))
```


```{r}
example <- tibble(
  parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
  vals = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
)

example |>
  count(parts, wt = vals) |>
  ggplot(
    aes(fill = parts, values = n)
  ) +
  geom_waffle(
    n_rows = 20,
    size = 0.33, 
    colour = "white",
    flip = TRUE
  ) +
  scale_fill_manual(
    name = NULL,
    values = c("#a40000", "#169948", "#ae6056"),
    labels = c("Fruit", "Salad", "Pizza")
  ) +
  coord_equal() +
  theme_minimal()+
  theme_enhance_waffle()
```


```{r}
prop_eco <- mn_eco_industry |>
  group_by(sector_label) |>
  summarize(total = sum(estab)) |>
  mutate(prop = (total * 100 / sum(total)) + 0.35)

parts <- tibble(names = prop_eco$sector_label, vals = prop_eco$prop)

waffle(parts, 
       rows = 10,
       size = 2,
       pad = 0,
       legend_pos = "bottom")

prop_eco |>
  ggplot(
    aes(fill = sector_label, values = prop)
  ) +
geom_waffle(
    n_rows = 10,
    size = 1.5, 
    colour = "black",
    flip = FALSE,
  ) +
  scale_fill_manual(
    name = NULL,
    values = c("#0A9396", "#94D2BD", "#E9D8A6", "#EE9B00", "#CA7902", "#9B2226")
  ) +
  coord_equal() +
  labs(
    title = "Minnesota Economic Industry",
    subtitle = "Proportion of Establishments by Sector",
    caption = "Source: U.S. Census Bureau"
  ) +
  dark_theme_minimal(base_size = 14)+
  theme_enhance_waffle()

# iron() combine 2 waffles
```


```{r}
retail <- mn_eco_industry |>
  filter(sector_label == "Retail Trade") |>
  mutate(simplified_label = tolower(naics2017_label)) |>
  mutate(simplified_label = ifelse(grepl("stores", simplified_label), "Stores", simplified_label),
         simplified_label = ifelse(grepl("dealers", simplified_label), "Dealers", simplified_label),
         simplified_label = ifelse(grepl("markets", simplified_label), "Markets", simplified_label),
         simplified_label = ifelse(grepl("retailers", simplified_label), "Retailers", simplified_label),
         simplified_label = ifelse(grepl("stations", simplified_label), "Stations", simplified_label),
         simplified_label = ifelse(grepl("establishments", simplified_label), "Establishments", simplified_label),
         simplified_label = ifelse(grepl("houses", simplified_label), "Houses", simplified_label),
         simplified_label = ifelse(grepl("centers", simplified_label), "Centers", simplified_label),
         simplified_label = ifelse(grepl("operators", simplified_label), "Operators", simplified_label),
         simplified_label = ifelse(grepl("retail trade", simplified_label), "Retailers", simplified_label),
         simplified_label = ifelse(grepl("florists", simplified_label), "Stores", simplified_label)) |>
  group_by(simplified_label) |>
  summarize(total = sum(napcsdol)) |>
  mutate(prop = (total * 100 / sum(total)) + 0.35)
```


```{r}
retail |>
  ggplot(
    aes(fill = simplified_label, values = prop)
  ) +
  geom_waffle(
    n_rows = 10,
    size = 1.5, 
    colour = "black",
    flip = FALSE,
  ) +
  scale_fill_manual(
    name = NULL,
    values = c("#0A9396", "#94D2BD", "#E9D8A6", "#EE9B00", "#CA7902", "#9B2226")
  ) +
  coord_equal() +
  labs(
    title = "Minnesota Retail Economic Sales",
    subtitle = "Proportion of Sales by Sub Sector",
    caption = "Source: U.S. Census Bureau"
  ) +
  dark_theme_minimal(base_size = 14)+
  theme_enhance_waffle()
```




```{r}
retail_rm <- retail |>
  filter(simplified_label != "Markets") |>
  filter(simplified_label != "Operators") |>
  filter(simplified_label != "Establishments")

retail_parts <- tibble(names = retail_rm$simplified_label, vals = retail_rm$prop)

prop_eco_napcsdol <- mn_eco_industry |>
  group_by(sector_label) |>
  summarize(total = sum(napcsdol)) |>
  mutate(prop = (total * 100 / sum(total)) + 0.35)

full_parts <- tibble(names = prop_eco_napcsdol$sector_label, vals = prop_eco_napcsdol$prop)
```

```{r}
w1 <- waffle(full_parts,
       rows = 10,
       size = 2,
       pad = 0,
       colors = c("#0A9396", "#94D2BD", "#E9D8A6", "#EE9B00", "#CA7902", "#9B2226"),
       legend_pos = "right",
       title = "Minnesota Economic Sales Proportion by Sector")

w2 <- waffle(retail_parts, 
         rows = 10,
         size = 2,
         pad = 0,
         color = c("#461220", "#8c2f39", "#b23a48", "#fcb9b2", "#fed0bb", "#FFF1EB"),
         legend_pos = "right",
         title = "Retail Trade Economic Sales Proportion by Sub Sector")

iron(w1, w2)
```




































```{r}
#| eval: false
#| include: false

xdf |>
  count(parts, wt = vals) |>
  ggplot(
    aes(label = parts, values = n)
  ) +
  geom_pictogram(
    n_rows = 20, 
    size = 6, 
    aes(colour = parts), 
    flip = TRUE,
    family = "FontAwesome5Free-Solid"
  ) +
  scale_color_manual(
    name = NULL,
    values = c("#073f9c", "black", "#f34323"),
    labels = c("BitBucket", "GitHub", "Other")
  ) +
  scale_label_pictogram(
    name = NULL,
    values = c("bitbucket", "github", "git-alt"),
    labels = c("BitBucket", "GitHub", "Other")
  ) +
  coord_equal() +
  # theme_ipsum_rc(grid="") +
  theme_minimal()+
  theme_enhance_waffle() +
  theme(
    legend.text = element_text(hjust = 0, vjust = 1)
  )
```

```{r}
#| eval: false
#| include: false

waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "music", glyph_size = 6)
```

```{r}
#| eval: false
#| include: false

library(ggplot2)
library(waffle)
library(hrbrthemes)

install_fa_fonts()

mydf <- data.frame(food_group = factor(c("Ice Cream", "Pizza", "Cake"),
    levels=c("Ice Cream", "Pizza", "Cake")), consumption = c(10, 20, 10))

# Scales and preparing for labels
scalevalues <- sprintf("%.0f%%",round(prop.table(mydf$consumption)*100, 3))
customtext <- c(
  paste("Ice cream", '=', scalevalues[1]),
  paste("Pizza", '=', scalevalues[2]),
  paste("Cake", '=', scalevalues[3])
)

ggplot(mydf, aes(label = food_group, 
                 values = consumption, 
                 color = food_group)) +
  geom_pictogram(n_rows = 10, make_proportional = TRUE) +
  scale_color_manual(
    name = NULL,
    values = c(
      `Ice Cream` = "#c68958",
      Pizza = "#ae6056",
      Cake = "#a40000"
    ),
    labels = customtext
  ) +
  scale_label_pictogram(
    name = NULL,
    values = c(
      `Ice Cream` = "ice-cream",
      Pizza = "pizza-slice",
      Cake = "birthday-cake"
    ), 
    labels = customtext) +
  coord_equal() +
  theme_ipsum_rc(grid="") +
  theme_enhance_waffle() +
  theme(legend.key.height = unit(2.25, "line")) +
  theme(legend.text = element_text(size = 10, hjust = 0, vjust = 0.75))
```

```{r}
#| eval: false
#| include: false

# DOES NOT WORK

install.packages("extrafont")
library(extrafont)

source_font_dir <- "C:/Users/jaden/AppData/Local/R/cache/R/renv/cache/v5/R-4.3/x86_64-w64-mingw32/waffle/1.0.2/b4a5d1a3036a7e6a63439b16b3ad39fc/waffle/fonts"

destination_font_dir <- file.path(Sys.getenv("windir"), "Fonts")

file.copy(from = list.files(source_font_dir, pattern = "*.ttf", full.names = TRUE), 
          to = destination_font_dir, 
          overwrite = TRUE)

font_import(paths = destination_font_dir, prompt = FALSE)

loadfonts()

plot.new()
text(x = 0.5, y = 0.5, labels = "\uf083", family = "FontAwesome", cex = 5, col = "darkblue")
```

